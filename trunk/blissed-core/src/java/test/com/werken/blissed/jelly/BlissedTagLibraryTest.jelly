<?xml version="1.0"?>

<test:suite xmlns:j="jelly:core" 
            xmlns:test="jelly:junit"
            xmlns="jelly:com.werken.blissed.jelly.BlissedTagLibrary"
            trim="true">
  <!--
    ||     <blissed>
    -->

  <test:case name="testBlissedTag">
    <blissed>
      <j:set var="foo" value="testBlissedTag"/>
    </blissed>
    <test:assert test="${foo == 'testBlissedTag'}">blissed passthrough</test:assert>
  </test:case>

  <!--
    ||     <engine>
    -->

  <test:case name="testEngineTag_NoVar">
    <j:catch var="e">
      <engine/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.missingAttribute == 'var')}">missing-attr: var</test:assert>
  </test:case>

  <test:case name="testEngineTag_EmptyVar">
    <j:catch var="e">
      <engine var=""/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.missingAttribute == 'var')}">missing-attr: var</test:assert>
  </test:case>

  <test:case name="testEngineTag_Valid">
    <engine var="theEngine"/>
    <test:assert test="${theEngine != null}">process engine var</test:assert>
  </test:case>


  <!--
    ||     <process>
    -->

  <test:case name="testProcessTag_NoName">
    <j:catch var="e">
      <process start="foo"/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.missingAttribute == 'name')}">missing-attr: name</test:assert>
  </test:case>

  <test:case name="testProcessTag_NoStart">
    <j:catch var="e">
      <process name="foo"/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.missingAttribute == 'start')}">missing-attr: start</test:assert>
  </test:case>

  <test:case name="testProcessTag_StartNotFound">
    <j:catch var="e">
      <process name="foo" start="noStart"/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.message.startsWith( 'Start state' ))}">start-state not found</test:assert>
  </test:case>

  <test:case name="testProcessTag_Var">
    <process name="foo" start="start" var="theProcess">
      <state name="start"/>
    </process>
    <test:assert 
          test="${theProcess != null}">process not null</test:assert>
  </test:case>

  <test:case name="testProcessTag_WithDescription">
    <process name="foo" start="start" var="theProcess">
      <description>This is the process</description>
      <state name="start"/>
    </process>
    <test:assert 
          test="${theProcess != null}">process not null</test:assert>
    <test:assert 
          test="${theProcess.description == 'This is the process'}">process desc</test:assert>
  </test:case>

  <!--
    ||     <state>
    -->

  <test:case name="testStateTag_NoProcess">
    <j:catch var="e">
      <state/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.message.startsWith( 'Not within a process' ))}">not within a process</test:assert>
  </test:case>

  <test:case name="testStateTag_NoName">
    <j:catch var="junk">
      <process name="foo" start="noStart">
        <j:catch var="e">
          <state/>
        </j:catch>
        <test:assert 
              test="${(e != null) and (e.missingAttribute == 'name')}">missing-attr: name</test:assert>
      </process>
    <!-- expected to throw.  we're not testing that. -->
    </j:catch>
  </test:case>

  <test:case name="testStateTag_Valid">
    <process name="foo" start="start">
      <state name="start"/>
    </process>
  </test:case>

  <test:case name="testStateTag_WithDescription">
    <process name="foo" start="start" var="theProcess">
      <state name="start">
        <description>This is the state</description>
      </state>
    </process>
    <test:assert 
          test="${theProcess.getState('start').description == 'This is the state'}">state desc</test:assert>
  </test:case>

  <test:case name="testStateTag_Terminal">
    <process name="foo" start="start" var="theProcess">
      <state name="start" terminal="true"/>
    </process>
    <test:assert 
          test="${theProcess.getState('start').transitions[0].destination == null}">terminal transition</test:assert>
  </test:case>

  <!--
    ||     <description>
    -->

  <test:case name="testDescriptionTag_NoContainer">
    <j:catch var="e">
      <description/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.reason.endsWith( 'to describe' ))}">not within a container</test:assert>
  </test:case>

  <!--
    ||     <transition>
    -->

  <test:case name="testTransitionTag_NoProcess">
    <j:catch var="e">
      <transition/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.reason.startsWith( 'Not within a process' ))}">not within process</test:assert>
  </test:case>

  <test:case name="testTransitionTag_NoFrom">
    <j:catch var="junk">
      <process name="foo" start="origin">
        <j:catch var="e">
          <transition to="dest"/>
        </j:catch>
        <test:assert 
              test="${(e != null) and (e.missingAttribute == 'from')}">missing-attr: from</test:assert>
      </process>
    <!-- expected to throw.  we're not testing that. -->
    </j:catch>
  </test:case>

  <test:case name="testTransitionTag_NoTo">
    <j:catch var="junk">
      <process name="foo" start="origin">
        <j:catch var="e">
          <transition from="origin"/>
        </j:catch>
        <test:assert 
              test="${(e != null) and (e.missingAttribute == 'to')}">missing-attr: to</test:assert>
      </process>
    <!-- expected to throw.  we're not testing that. -->
    </j:catch>
  </test:case>


  <test:case name="testTransitionTag_FromNoSuchState">
    <j:catch var="junk">
      <process name="foo" start="origin">
        <state name="dest"/>
        <j:catch var="e">
          <transition from="origin" to="dest"/>
        </j:catch>
        <test:assert 
              test="${(e != null) and (e.reason.startsWith( 'No such state' ))}">no such state</test:assert>
      </process>
    <!-- expected to throw.  we're not testing that. -->
    </j:catch>
  </test:case>

  <test:case name="testTransitionTag_ToNoSuchState">
    <j:catch var="junk">
      <process name="foo" start="origin">
        <state name="origin"/>
        <j:catch var="e">
          <transition from="origin" to="dest"/>
        </j:catch>
        <test:assert 
              test="${(e != null) and (e.reason.startsWith( 'No such state' ))}">no such state</test:assert>
      </process>
    <!-- expected to throw.  we're not testing that. -->
    </j:catch>
  </test:case>

  <test:case name="testTransitionTag_Valid">
    <process name="foo" start="origin" var="theProcess">
      <state name="origin"/>
      <state name="dest"/>
      <transition from="origin" to="dest"/>
    </process>
    <test:assert
          test="${theProcess.getState('origin').transitions[0].destination == theProcess.getState('dest')}">transition</test:assert>
  </test:case>

  <test:case name="testTransitionTag_WithDescription">
    <process name="foo" start="origin" var="theProcess">
      <state name="origin"/>
      <state name="dest"/>
      <transition from="origin" to="dest">
        <description>This is the transition</description>
      </transition>
    </process>
    <test:assert
          test="${theProcess.getState('origin').transitions[0].description == 'This is the transition'}">transition desc</test:assert>
  </test:case>

  <!--
    ||     <spawn>
    -->

  <test:case name="testSpawn_NoProcess">
    <j:catch var="e">
      <spawn/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.missingAttribute == 'process')}">missing-attr: process</test:assert>
  </test:case>

  <test:case name="testSpawn_NoEngine_NoContext">
    <process name="theProcess" var="theProcess" start="start">
      <state name="start" terminal="true"/>
    </process>
    <j:catch var="e">
      <spawn process="${theProcess}"/>
    </j:catch>
    <test:assert 
          test="${(e != null) and (e.missingAttribute == 'engine')}">missing-attr: engine</test:assert>
  </test:case>

  <test:case name="testSpawn_Valid_NoContext_WithVar">
    <process name="theProcess" var="theProcess" start="start">
      <state name="start" terminal="true"/>
    </process>
    <engine var="engine"/>
    <spawn process="${theProcess}" engine="${engine}" var="theContext"/>
    <test:assert test="${theContext != null}"/>
  </test:case>

  <!--
    ||     <pass>
    -->

  <test:case name="testPassTag">
    <j:catch var="e">
      <pass/>
    </j:catch>
    <test:assert
          test="${e.class.name == 'com.werken.blissed.jelly.PassException'}">pass exception</test:assert>
  </test:case>

  <!--
    ||     <fail>
    -->

  <test:case name="testFailTag">
    <j:catch var="e">
      <fail/>
    </j:catch>
    <test:assert
          test="${e.class.name == 'com.werken.blissed.jelly.FailException'}">pass exception</test:assert>
  </test:case>

  <!--
    ||     <guard>
    -->

  <test:case name="testGuard_WithVar_NoTransition">
    <guard var="theGuard">
      <pass/>
    </guard> 
    <test:assert test="${theGuard != null}">guard var</test:assert>
    <test:assert test="${theGuard.test(null, null)}">guard pass test</test:assert>
    <guard var="theGuard">
      <fail/>
    </guard> 
    <test:assert test="${theGuard != null}">guard var</test:assert>
    <test:assert test="${!theGuard.test(null, null)}">guard fail test</test:assert>
  </test:case>

  <test:case name="testGuard_NoVar_WithTransition">
    <process name="foo" start="start" var="theProcess">
      <state name="start"/>
      <state name="stop"/>
      <transition from="start" to="stop">
        <guard>
          <fail/>
        </guard>
      </transition>
    </process>
    <test:assert 
          test="${theProcess.getState('start').transitions[0] != null}">transition</test:assert>
    <test:assert 
          test="${theProcess.getState('start').transitions[0].guard != null}">guard</test:assert>
    <test:assert 
          test="${!theProcess.getState('start').transitions[0].guard.test(null, null)}">guard fail test</test:assert>
  </test:case>

  <test:case name="testGuard_Duplicate">
    <process name="foo" start="start" var="theProcess">
      <state name="start"/>
      <state name="stop"/>
      <transition from="start" to="stop">
        <guard>
          <fail/>
        </guard>
        <j:catch var="e">
          <guard>
            <fail/>
          </guard>
        </j:catch>
        <test:assert 
              test="${(e != null) and (e.reason.startsWith( 'Guard already defined' ))}">duplicate guard</test:assert>
      </transition>
    </process>
  </test:case>

  <!--
    ||     <guard>
    --> 

  <test:case name="testActivity_WithVar_NoState">
    <activity var="theActivity"/>
    <test:assert test="${theActivity != null}">activity var</test:assert>
    <test:assert test="${theActivity.class.name == 'com.werken.blissed.jelly.JellyActivity'}">activity class</test:assert>
  </test:case>

  <test:case name="testActivity_WithState">
    <process name="foo" var="theProcess" start="start">
      <state name="start">
        <activity var="theActivity"/>
      </state>
    </process>
    <test:assert test="${theProcess.getState('start').activity == theActivity}">state activity</test:assert>
  </test:case>

</test:suite>


